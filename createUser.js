require("dotenv").config();
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const readline = require("readline");
const User = require("./models/User");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
.connect(process.env.MONGO_URI)
.then(() => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB"))
.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err);
  process.exit(1);
});

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const askQuestion = (query) =>
  new Promise((resolve) => rl.question(query, resolve));

const createUser = async () => {
  try {
    const username = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
    const password = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");

    rl.close();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      mongoose.connection.close();
      return;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = new User({
      username,
      password: hashedPassword,
    });

    await user.save();
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —Å–æ–∑–¥–∞–Ω!`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign({ id: user._id, username: user.username }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    console.log("üîë JWT Token:", token);

    mongoose.connection.close();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    mongoose.connection.close();
  }
};

createUser();