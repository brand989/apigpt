const express = require("express");
const router = express.Router();
const protect = require("../middleware/authMiddleware");
const Message = require("../models/Message");
const { ObjectId } = require("mongoose").Types;

// ‚úÖ 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
// ‚úÖ 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
router.post("/", protect, async (req, res) => {
  try {
    console.log("üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", req.body);
    const { chatId, text } = req.body; // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chatId

    if (!chatId || !text) {
      return res.status(400).json({ error: "–ß–∞—Ç –∏ —Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

 

    const message = new Message({
      chatId,
      sender: req.user.userId, // ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      text,
    });

    await message.save();
    res.status(201).json(message);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
router.get("/:chatId", protect, async (req, res) => {
  try {
    const { chatId } = req.params;

    const messages = await Message.find({ chatId }) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ chatId
      .sort({ createdAt: 1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ

    if (messages.length === 0) {
      return res.json({ message: "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç" });
    }

    res.json(messages);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;