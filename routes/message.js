const express = require("express");
const router = express.Router();
const protect = require("../middleware/authMiddleware");
const axios = require("axios");
const Message = require("../models/Message");
const { ObjectId } = require("mongoose").Types;

// ‚úÖ 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
// ‚úÖ 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
router.post("/", protect, async (req, res) => {
  try {
    console.log("üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", req.body);
    const { chatId, text } = req.body; // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chatId

    if (!chatId || !text) {
      return res.status(400).json({ error: "–ß–∞—Ç –∏ —Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }


    const message = new Message({
      chatId,
      sender: req.user.userId, // ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      text,
    });

    await message.save();

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    const chatGptResponse = await getChatGPTResponse(text);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç ChatGPT –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const botMessage = new Message({
      chatId,
      sender: "67c5c665154bda1f2ced00cf",  // –ò–ª–∏ ID –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      text: chatGptResponse,
    });

    await botMessage.save();  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
  
    res.status(201).json({ userMessage: message, botMessage });  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
router.get("/:chatId", protect, async (req, res) => {

  try {
    const { chatId } = req.params;

    console.log(chatId)

    const messages = await Message.find({ chatId }) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ chatId
      .sort({ createdAt: 1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ

    if (messages.length === 0) {
      return res.json({ message: "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç" });
    }

    res.json(messages);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});



async function getChatGPTResponse(message) {
  const apiKey = process.env.OPENAI_API_KEY; // –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  
  try {
    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions", // URL –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å OpenAI
      {
        model: "gpt-3.5-turbo",  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å "davinci" –∏–ª–∏ "gpt-3.5-turbo"
        messages: [{ role: "user", content: message }],           // –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ ChatGPT
        max_tokens: 150,            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        temperature: 0.7,           // –£—Ä–æ–≤–µ–Ω—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
      },
      {
        headers: {
          "Authorization": `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        },
      }
    );
     // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     console.log("–û—Ç–≤–µ—Ç –æ—Ç OpenAI:", response.data);

     if (response.data.choices && response.data.choices.length > 0) {
      const botMessage = response.data.choices[0].message;
      if (botMessage && botMessage.content) {
        return botMessage.content.trim();
      } else {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ.");
      }
    } else {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.");
    } 

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:", error);
    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.";  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
  }
}



module.exports = router;