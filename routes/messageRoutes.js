const express = require("express");
const router = express.Router();
const protect = require("../middleware/authMiddleware");
const Message = require("../models/Message");
const { ObjectId } = require("mongoose").Types;

// ‚úÖ 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
router.post("/", protect, async (req, res) => {
  try {

    console.log("üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", req.body);
    const { recipient, text } = req.body;
    if (!recipient || !text) {
      return res.status(400).json({ error: "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∏ —Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const message = new Message({
      sender: req.user.userId, // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ)
      recipient,
      text,
    });

    await message.save();
    res.status(201).json(message);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
router.get("/:userId", protect, async (req, res) => {
    try {

    const { userId } = req.params;

    const messages = await Message.find({
        $or: [
            { sender: String(req.user.userId), recipient: String(userId) },
            { sender: String(userId), recipient: String(req.user.userId) },
        ],
      }).sort({ createdAt: 1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      
      if (messages.length === 0) {
        return res.json({ message: "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç" });
      }

      res.json(messages);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

module.exports = router;