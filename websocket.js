const WebSocket = require("ws");
const jwt = require("jsonwebtoken");
const Message = require("./models/Message");

const setupWebSocket = (server) => {
  const wss = new WebSocket.Server({ server });

  wss.on("connection", (ws, req) => {
    console.log("üîó WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è");

    let authHeader = req.headers["sec-websocket-protocol"];
    if (!authHeader) {
      ws.close();
      return console.log("‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Sec-WebSocket-Protocol, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    }

    authHeader = authHeader.split(",").pop().trim();
    const token = authHeader.replace("Bearer_", "").trim();

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      ws.user = decoded;
      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:", ws.user.userId);
    } catch (error) {
      ws.close();
      return console.log("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    }

    // üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
    ws.on("message", async (message) => {
      try {
        const data = JSON.parse(message);
        console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data);

        // ‚úÖ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (data.type === "get_messages") {
          const { userId } = data;

          if (!userId) {
            return ws.send(JSON.stringify({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è userId" }));
          }

          const messages = await Message.find({
            $or: [
              { sender: String(ws.user.userId), recipient: String(userId) },
              { sender: String(userId), recipient: String(ws.user.userId) },
            ],
          }).sort({ createdAt: 1 });

          if (messages.length === 0) {
            return ws.send(JSON.stringify({ message: "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç" }));
          }

          ws.send(JSON.stringify({ type: "messages", data: messages }));
          return;
        }

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (data.type === "send_message") {
          const { recipient, text } = data;
          if (!recipient || !text) {
            return console.log("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞");
          }

          const newMessage = new Message({
            sender: ws.user.userId,
            recipient,
            text,
          });

          await newMessage.save();
          console.log("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:", newMessage);

          // üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
          wss.clients.forEach((client) => {
            if (client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ type: "new_message", data: newMessage }));
            }
          });

          return;
        }

      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });

    ws.on("close", () => {
      console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
    });
  });

  return wss;
};

module.exports = setupWebSocket;