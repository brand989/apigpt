const WebSocket = require("ws");
const jwt = require("jsonwebtoken");
const Message = require("./models/Message");
const axios = require("axios");


const setupWebSocket = (server) => {
  const wss = new WebSocket.Server({ server });

  wss.on("connection", (ws, req) => {
    console.log("üîó WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è");

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    let authHeader = req.headers["sec-websocket-protocol"];

    if (!authHeader) {
        ws.close();
        return console.log("‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Sec-WebSocket-Protocol, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
      }

    authHeader = authHeader.split(",").pop().trim();

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω userId –≤–º–µ—Å—Ç–æ JWT
    if (!authHeader.startsWith("User_")) {
      ws.close();
      return console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    }

    const userId = authHeader.replace("User_", "").trim();
    ws.userId = userId;
    console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, userId:", userId);

    // üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
    ws.on("message", async (message) => {
      try {
        const data = JSON.parse(message);
        console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data);

        // ‚úÖ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (data.type === "get_messages") {
            const { chatId } = data;  // –ò–∑–≤–ª–µ–∫–∞–µ–º chatId –∏–∑ –¥–∞–Ω–Ω—ã—Ö
          
            if (!chatId) {
              return ws.send(JSON.stringify({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è chatId" }));  // –ï—Å–ª–∏ chatId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            }
          
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            const messages = await Message.find({ chatId }).sort({ createdAt: 1 });
          
            if (messages.length === 0) {
              return ws.send(JSON.stringify({ message: "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç" }));
            }
          
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            ws.send(JSON.stringify({ type: "messages", data: messages }));
            return;
          }


        // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (data.type === "send_message") {
            const { chatId, text } = data;  // –ò–∑–≤–ª–µ–∫–∞–µ–º chatId –∏ text
          
            if (!text || !chatId) {
              return console.log("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ chatId");
            }
          
            const newMessage = new Message({
              sender: ws.userId,
              chatId,  // –î–æ–±–∞–≤–ª—è–µ–º chatId
              text,
            });
          
            await newMessage.save();
            console.log("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:", newMessage);

          // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenAI, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç

            const chatGptResponse = await getChatGPTResponse(text); // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å

            // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const botMessage = new Message({
                chatId,
                sender: "67c5c665154bda1f2ced00cf",  // –ò–ª–∏ ID –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                text: chatGptResponse, // –û—Ç–≤–µ—Ç –æ—Ç OpenAI
            });

            await botMessage.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –ë–î
            console.log("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ChatGPT —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:", botMessage);



            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            wss.clients.forEach((client) => {
              if (client.readyState === WebSocket.OPEN) {
                client.send(JSON.stringify({ type: "new_message", data: newMessage }));
              }
            });
          
            return;
          }

      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });




    ws.on("close", () => {
      console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
    });
  });

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
Message.watch().on('change', (change) => {
    console.log("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", change);
    if (change.operationType === 'insert') {
      const newMessage = change.fullDocument;
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({ type: 'new_message', data: newMessage }));
        }
      });
    }
  });




  return wss;
};

async function getChatGPTResponse(message) {
    const apiKey = process.env.OPENAI_API_KEY; // –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    try {
      const response = await axios.post(
        "https://api.openai.com/v1/chat/completions", // URL –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å OpenAI
        {
          model: "gpt-3.5-turbo",  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å "davinci" –∏–ª–∏ "gpt-3.5-turbo"
          messages: [{ role: "user", content: message }],           // –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ ChatGPT
          max_tokens: 150,            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
          temperature: 0.7,           // –£—Ä–æ–≤–µ–Ω—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
        },
        {
          headers: {
            "Authorization": `Bearer ${apiKey}`,
            "Content-Type": "application/json",
          },
        }
      );
       // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
       console.log("–û—Ç–≤–µ—Ç –æ—Ç OpenAI:", response.data);
  
       if (response.data.choices && response.data.choices.length > 0) {
        const botMessage = response.data.choices[0].message;
        if (botMessage && botMessage.content) {
          return botMessage.content.trim();
        } else {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ.");
        }
      } else {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.");
      } 
  
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:", error);
      return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.";  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
    }
  }
  

module.exports = setupWebSocket;